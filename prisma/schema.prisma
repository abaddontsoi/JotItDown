generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum TaskInfoStatus {
    Draft
    Pending
    Running
    Done
}

enum UserStatus {
    Enabled
    Disabled
}

enum NoteStatus {
    Draft
    Pending
    Running
    Done
}

enum CashFlowType {
    Debit  @map("Income")
    Credit @map("Expense")
}

// should discover more on user authentication
model User {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    // allows duplicated user display name
    name              String    @db.String
    userName          String?
    email             String?   @unique
    emailVerified     DateTime?
    image             String?
    // userLoginName     String @unique
    // userPwdHash       String
    userHashtagNumber Int?
    Sessions          Session[]
    UserAccounts      Account[]

    // deleting account will actually remove their related record in database, not setting a field to false
    status UserStatus @default(Enabled)

    createdAt DateTime @default(now()) // also used as the start date if the task
    updatedAt DateTime @updatedAt

    TaskInfo             TaskInfo[]
    Note                 Note[]
    Category             Category[]
    Account              CashAccount[]
    CashFlow             CashFlow[]
    // CashFlowMtoMCategory CashFlowMtoMCategory[]
    // Transaction          Transaction[]
    Transaction          Transaction[]
    Property             Property[]
    CashFlowMtoMCategory CashFlowMtoMCategory[]
    CashFlowCategory     CashFlowCategory[]
    ContentBlock         ContentBlock[]

    @@unique([userName, userHashtagNumber])
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

model TaskInfo {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    title       String?
    description String

    status TaskInfoStatus @default(Draft)

    deadline DateTime

    parentContentBlockid String?       @db.ObjectId
    parentContentBlock   ContentBlock? @relation(fields: [parentContentBlockid], references: [id], onDelete: SetNull, onUpdate: Cascade)

    belongToId String @db.ObjectId
    belongTo   User   @relation(fields: [belongToId], references: [id])

    createdAt DateTime @default(now()) // also used as the start date if the task
    updatedAt DateTime @updatedAt
}

model ContentBlock {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    title String?

    content String

    belongToId String @db.ObjectId
    belongTo   User   @relation(fields: [belongToId], references: [id])

    // set to optional for quick notes
    parentNoteId String @db.ObjectId
    parentNote   Note   @relation(fields: [parentNoteId], references: [id], onDelete: Cascade, onUpdate: NoAction)

    taskInfo TaskInfo[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Note {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    title       String
    description String?

    categoryId String?   @db.ObjectId
    category   Category? @relation(fields: [categoryId], references: [id])

    parentNoteId String? @db.ObjectId
    parentNote   Note?   @relation(name: "ParentChildrenNoteRelation", fields: [parentNoteId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    status NoteStatus @default(Draft)

    stared Boolean

    readCount   Int @default(0)
    updateCount Int @default(0)

    isQuickNote Boolean @default(false)

    hidden Boolean

    belongToId String @db.ObjectId
    belongTo   User   @relation(fields: [belongToId], references: [id])

    contentBlocks ContentBlock[]

    childrenNotes Note[] @relation(name: "ParentChildrenNoteRelation")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    name String @unique

    parentCategoryId String?   @db.ObjectId
    parentCategory   Category? @relation(name: "CategoryParentChildrenRelation", fields: [parentCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    category Category[] @relation(name: "CategoryParentChildrenRelation")

    belongToId String @db.ObjectId
    belongTo   User   @relation(fields: [belongToId], references: [id])

    Note Note[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // @@unique([name])
}

model CashAccount {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    title       String
    description String?

    belongToId String @db.ObjectId
    belongTo   User   @relation(fields: [belongToId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    CashFlow CashFlow[]
}

model CashFlow {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    title       String
    value       Float
    description String?
    type        CashFlowType
    category    String?

    isLongTermUsage Boolean @default(false)

    accountid String?      @db.ObjectId
    account   CashAccount? @relation(fields: [accountid], references: [id])

    belongToId String @db.ObjectId
    belongTo   User   @relation(fields: [belongToId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    CashFlowMtoMCategory CashFlowMtoMCategory[]

    Property Property[]

    FromTransaction Transaction[] @relation("CashFlowFromRelation")

    ToTransaction Transaction[] @relation("CashFlowToRelation")
}

model CashFlowCategory {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    belongToId String @db.ObjectId
    belongTo   User   @relation(fields: [belongToId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    CashFlowMtoMCategory CashFlowMtoMCategory[]
}

model CashFlowMtoMCategory {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    belongToId String @db.ObjectId
    belongTo   User   @relation(fields: [belongToId], references: [id])

    cashFlowRecordId String   @db.ObjectId
    cashFlowRecord   CashFlow @relation(fields: [cashFlowRecordId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    cashFlowCategoryId String           @map("cashFlowCategoryid") @db.ObjectId
    cashFlowCategory   CashFlowCategory @relation(fields: [cashFlowCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Transaction {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    fromId String   @map("fromid") @db.ObjectId
    from   CashFlow @relation("CashFlowFromRelation", fields: [fromId], references: [id])

    toId String   @db.ObjectId
    to   CashFlow @relation("CashFlowToRelation", fields: [toId], references: [id])

    remark String?

    belongToId String @db.ObjectId
    belongTo   User   @relation(fields: [belongToId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Property {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    relatedCashRecordId String   @map("relatedCashRecordid") @db.ObjectId
    relatedCashRecord   CashFlow @relation(fields: [relatedCashRecordId], references: [id])

    belongToId String @db.ObjectId
    belongTo   User   @relation(fields: [belongToId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
